{"version":3,"sources":["GuessCount.js","Card.js","HallOfFame.js","HighScoreInput.js","App.js","serviceWorker.js","index.js"],"names":["GuessCount","guesses","className","Card","card","feedback","index","onClick","HallOfFame","entries","map","id","date","player","key","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","state","winner","handleWinnerUpdate","event","setState","target","value","toUpperCase","persistWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","push","splice","length","setItem","stringify","saveHOFEntry","props","onSubmit","this","type","autoComplete","onChange","Component","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","displayHallOfFame","handleCardClick","handleNewPairClosedBy","result","candidates","shuffle","SIDE","pop","indexMatched","includes","newPair","newGuesses","matched","setTimeout","window","location","reload","won","getFeedbackForCard","refreshPage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e938ef6.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './GuessCount.css'\n\nconst GuessCount = ({ guesses }) => <div className='guesses'>{guesses}</div>\n\nGuessCount.propTypes = {\n  guesses: PropTypes.number.isRequired\n}\n\nexport default GuessCount\n","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '?'\n\nconst Card = ({ card, feedback, index, onClick }) => (\n  <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n    <span className='symbol'>\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n    </span>\n  </div>\n)\n\nCard.propTypes = {\n  card: PropTypes.string.isRequired,\n  feedback: PropTypes.oneOf([\n    'visible',\n    'hidden',\n    'justMatched',\n    'justMismatched'\n  ]).isRequired,\n  index: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Card\n","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({ entries }) => (\n  <table className='hallOfFame'>\n    <tbody>\n      {entries.map(({ id, guesses, date, player }) => (\n        <tr key={id}>\n          <td className='date'>{date}</td>\n          <td className='guesses'>{guesses}</td>\n          <td className='player'>{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired\n    })\n  ).isRequired\n}\n\nexport default HallOfFame\n\n// == Internal helpers ==============================================\n\nexport const FAKE_HOF = [\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' }\n]\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 5\n\nexport function saveHOFEntry (entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport './HighScoreInput.css'\n\nimport { saveHOFEntry } from './HallOfFame'\n\nclass HighScoreInput extends Component {\n  state = { winner: '' }\n\n  // Arrow fx for binding\n  handleWinnerUpdate = event => {\n    this.setState({ winner: event.target.value.toUpperCase() })\n  }\n\n  // Arrow fx for binding\n  persistWinner = event => {\n    event.preventDefault()\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner }\n    saveHOFEntry(newEntry, this.props.onStored)\n  }\n\n  render() {\n    return (\n      <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Bravo, entre ton pr√©nom :\n            <input\n              type=\"text\"\n              autoComplete=\"given-name\"\n              onChange={this.handleWinnerUpdate}\n              value={this.state.winner}\n            />\n          </label>\n          <button type=\"submit\">J'ai gagn√© !</button>\n        </p>\n      </form>\n    )\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput","import React, { Component } from \"react\";\nimport shuffle from \"lodash.shuffle\";\n\nimport \"./App.css\";\n\nimport GuessCount from \"./GuessCount\";\nimport Card from \"./Card\";\nimport HallOfFame, { FAKE_HOF } from \"./HallOfFame\";\nimport HighScoreInput from \"./HighScoreInput\";\n\nconst SIDE = 6;\nexport const SYMBOLS = \"üòÄüéâüíñüê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçøüå¥\";\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: []\n  };\n\n  // Arrow fx for binding\n  displayHallOfFame = hallOfFame => {\n    this.setState({ hallOfFame });\n  };\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? \"visible\" : \"hidden\";\n    }\n    if (currentPair.includes(index)) {\n      return indexMatched ? \"justMatched\" : \"justMismatched\";\n    }\n    return indexMatched ? \"visible\" : \"hidden\";\n  }\n\n  // Arrow function for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state;\n\n    if (currentPair.length === 2) {\n      return;\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] });\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n  };\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched =\n      cards[newPair[0]] === cards[newPair[1]] && newPair[0] !== newPair[1];\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS);\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return (\n      <div className=\"memory\">\n        <h1>Memory Game</h1>\n        <GuessCount guesses={guesses} />\n        <div className=\"cards\">\n          {cards.map((card, index) => (\n            <Card\n              card={card}\n              feedback={this.getFeedbackForCard(index)}\n              key={index}\n              index={index}\n              onClick={this.handleCardClick}\n            />\n          ))}\n        </div>\n\n        {won &&\n          (hallOfFame ? (\n            <div>\n              <HallOfFame entries={hallOfFame} />\n              <button type=\"button\" onClick={this.refreshPage}>\n                Restart\n              </button>\n            </div>\n          ) : (\n            <HighScoreInput\n              guesses={guesses}\n              onStored={this.displayHallOfFame}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}